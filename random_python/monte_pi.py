import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

# pi = 4*(circle/square)

pi_t = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989


def get_approx(per=10000):
    in_square = 0
    in_circle = 0
    progression = []
    for i in range(per):
        in_square += 1
        x, y = np.random.rand(2)
        if np.sqrt(x**2 + y**2) < 1:
            in_circle += 1
        pi = 4*(in_circle/in_square)
        error = np.round((1-pi/pi_t)*100, 6)
        print(f'Pi approxÂ {pi}, precision is {error} on iteration {i}')
        progression.append(pi)

    final_error = np.round((1-pi/pi_t)*100, 6)
    result = f'Final pi approx: {pi}, that is an error of {final_error} pct'
    print(result)
    plt.figure(figsize=(15, 10))
    plt.plot(progression)
    plt.axhline(pi_t, c='r', linestyle='dashed')
    plt.xlim(10, per)
    plt.savefig('pi_montecarlo.png', dpi=300)
    plt.close()
    return progression


progression = get_approx(per=10000000)
